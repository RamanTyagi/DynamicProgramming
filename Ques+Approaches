
"Those who cannot remember the past are condemned to repeat it!!!!!!"

{ Recursion : Try all ways / figure out ways / Best ways , Find max or min in something!! }
1. Try to represent the problem in terms of index.
2. Do all the possible stuffs on that index acc. to the problem statement.
3. Sum up all stuffs { count all ways }
4. min/max of all stuffs { find min/max }

DYNAMIC PROGRAMMING : 

->Dynamic Programming can be described as storing answers to various sub-problems to be used later whenever required to solve the main problem.

*The two common dynamic programming approaches are:

->Memoization: Known as the “top-down” dynamic programming, usually the problem is solved in the direction of the main problem to the base cases.
   * We tend to store the values of sub problems in some map/table }
   * Jitne parameters change ho rhe honge us hisab se DP bnegi ex: agr 2 parameter change ho rhe h to 2D Dp , 3 kr rhe hai to 3D Dp.

->Tabulation: Known as the “bottom-up ” dynamic programming, usually the problem is solved in the direction of solving the base cases to the main problem.
  * Stack space ko htane ke liye tabulation use krte hai!
  
*Sbse phle recursive solution socho top-down , Agr overlapping subproblems hai to :
*dp lga do optimise krne ke lie.
*Recursive -> memoization { Use dp with inital values as -1 } [ Pick/not_pick concept or by looping around indexes!!! ] 
*memoization -> tabulation { Phle bases cases bnao fir memoization wala code copy krdo loop lga kr }


1. 1D DP:

2. 2D DP:

3. LCS Pattern Based:


4. Stocks problems:
   1. Best Time to Buy and Sell Stock {Find the minimum price to buy stock and try to sell it at every profitable day possible !!} 
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
   2. Best Time to Buy and Sell Stock II ( Infinite Transactions ) { take isBuy = 1 , to tell you can buy and 0 to tell you can sell }
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
   3. Best Time to Buy and Sell Stock III ( Atmost 2 Transactions ) { Total 4 transactions can happen , Add a state for this too ! }
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/
   4. Best Time to Buy and Sell Stock IV ( Atmost K transcations ) { Total 2k transactions can happen , Add a state for this too ! }
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/
   5. Best Time to Buy and Sell Stock with Cooldown { Make isBuy = 2 , whenever you sell the stock to apply cooldown of 1 day }
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
   6. Best Time to Buy and Sell Stock with Transaction Fee { substract fee , whenver selling the stock ! }
      LINK : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

5. LIS Pattern Based:
   1. LIS base Question { Most_Imp } { Used in many questions } { Check for previous elements that are smaller than curr element , these are in order !}
      LINK : https://leetcode.com/problems/longest-increasing-subsequence/
      -> For printing LIS take a hash array too , to store indexes of the involved elements in the lis.
   2. Largest Divisible Subset { Take hash array and check for divisibility and follow LIS pattern }
      LINK : https://leetcode.com/problems/largest-divisible-subset/
   3. Longest String Chain { Same LIS pattern , just take care of predecessor and successor string }
      LINK : https://leetcode.com/problems/longest-string-chain/
   4. Longest Bitonic sequence { do lis from left->right , store in dp1 & do lis from right->left , store in dp2 -> Return max(dp1[i],dp2[i]) }
      LINK : https://www.codingninjas.com/codestudio/problems/longest-bitonic-sequence_1062688
   5. Number of Longest Increasing Subsequences { Do lis and simultaneously count the number of lis made till 'i' using all prev made lis's }
      LINK : https://leetcode.com/problems/number-of-longest-increasing-subsequence/
    

8. MCM DP | Partition DP
   *Identification :
   1. Solve a problem in a pattern / particular order.
   
   *Steps :
   1. Start solving the problem with the entire block/array.
      -> take i as the starting point of the partition / sub-problem,
      -> take j as the end point of the partition / sub-problem.
   2. Try all the partition by running a loop for partitions.
   3. Return the best possible 2 partitions.
   
   *Questions :
   1. Matrix Chain Multiplication { using another variable for making partitions in the array , solve the partitions seperately and use them !!! }
      LINK : https://www.codingninjas.com/codestudio/problems/matrix-chain-multiplication_975344
   2. Minimum Cost to Cut a Stick { sort all the cuts given, initial cur 0 ka daalo , final cut len ke equal ka daldo -> then partition approach }
      LINK : https://leetcode.com/problems/minimum-cost-to-cut-a-stick/
   3. Burst Balloons { For applying DP , we should have two independent subproblems from where we solve a particular problem }
       { Think to approach this question from reverse side !!! }
      LINK : https://leetcode.com/problems/burst-balloons/
   4. Palindrome Partitioning – II { Problem of front partition , Think of taking prefix seperately and solving the remaining question !}
      LINK : https://leetcode.com/problems/palindrome-partitioning-ii/
   5. Partition Array for Maximum Sum { Problem of front partition , taking the required array sep and solving the rem que !! }
      LINK : https://leetcode.com/problems/partition-array-for-maximum-sum/
   6. Take away the bottle { Check if adjacent bottles are equal or not , Solve que on this basis and return the minimum steps !}
      LINK : https://www.codingninjas.com/codestudio/problems/take-away-the-bottle_2179745?leftPanelTab=0

9. DP on Squares :
   *Questions :
   1. Largest Rectangle in Histogram { Using next smaller heights through two stack and calculating reqd widht }
      LINK : https://leetcode.com/problems/largest-rectangle-in-histogram/
   2. Maximal Rectangle { Using Largest Rectangle in Histogram }
      LINK : https://leetcode.com/problems/maximal-rectangle/
   3. Maximal Square { Using dp to store areas at every cell when value at that cell is '1' }
      LINK : https://leetcode.com/problems/maximal-square/
   4. Count Square Submatrices with All Ones { Using the above approach and simultaneouly adding that len into the count }
      LINK : https://leetcode.com/problems/count-square-submatrices-with-all-ones/

10. DP on trees :
 * Identification:
  -> If there is case of traversing the tree for two times , one for finding what we are looking for and other one we require for finding current one.
  -> For ex : For finding diameter of binary tree , we have to also find height . 
  -> In such cases Tc: O(n2)
  -> To optimise such cases we apply dynamic programming on trees.
 * General Syntax :
  -> int solve(Node *root,int& res)
    {
        if(root==NULL)
          return 0;
        int l = solve(root->left,res);
        int r = solve(root->right,res);
        int temp = Calculate temp ans; // 1+max(l,r)
        int ans = max(temp,relation); // relation : 1+l+r
        res = max(res,ans);
        return temp;
    }
  * Problems:
  1. Diameter of a Binary Tree - LINK: https://leetcode.com/problems/diameter-of-binary-tree/
  2. Binary Tree Maximum Path Sum - LINK: https://leetcode.com/problems/binary-tree-maximum-path-sum/








